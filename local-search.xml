<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java面试题</title>
    <link href="undefined2019/12/21/java%E9%9D%A2%E8%AF%95%E9%A2%98-2/"/>
    <url>2019/12/21/java%E9%9D%A2%E8%AF%95%E9%A2%98-2/</url>
    
    <content type="html"><![CDATA[<p>java 每天5道 练习</p><h2 id="1-int和Integer的区别？"><a href="#1-int和Integer的区别？" class="headerlink" title="1.int和Integer的区别？"></a>1.int和Integer的区别？</h2><p>int是基本数据类型，Integer是java为int提供的封装类，是引用数据类型。int默认值是0，而integer的默认值为null</p><h2 id="2-java的三大特性"><a href="#2-java的三大特性" class="headerlink" title="2.java的三大特性"></a>2.java的三大特性</h2><p>这个java的三大特性无非就是封装，继承，多态嘛<br>封装体现到我们把方法和变量都封装到一个类里面，直接用对象调用就可以了。<br>继承的体现是我们可以复用父类里面的代码，我们在项目中可以把共有的方法写到base的一个类中，<br>让其他类继承就可以了。<br>堕胎就是java里面的继承，重写，重载，都是多态，比如加号如果两边是数字的化，那就是一个运算符，<br>如果两边是字符串的话，那他就是个连接符。</p><h2 id="3-java-arrayList的存储结构-初始化的时候创建多大的数组"><a href="#3-java-arrayList的存储结构-初始化的时候创建多大的数组" class="headerlink" title="3.java arrayList的存储结构,初始化的时候创建多大的数组?"></a>3.java arrayList的存储结构,初始化的时候创建多大的数组?</h2><p>ArrayList 是基于数组实现的，是一个动态数组，其容量能自动增长，类似于c语言中的动态申请内存，动态增长内存。<br>ArrayList 是线程不安全的，只能用在单线程环境下。多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</p><h2 id="4-ArrayList与LinkedList区别"><a href="#4-ArrayList与LinkedList区别" class="headerlink" title="4.ArrayList与LinkedList区别"></a>4.ArrayList与LinkedList区别</h2><p>ArrayList使用数组方式存储数据，所以根据索引查询数据速度快，而新增或删除元素时需要涉及到位移操作，所以比较慢。<br>LinkedList使用双向连接方式存储数据，每个元素都记录前后元素的指针，所以插入、删除数据时只是更改前后元素的指针指向即可，速度非常快，然后通过下标查询元素时需要从头开始索引，所以比较慢，但是如果查询前几个元素或后几个元素速度比较快。开发中什么时候到ArrayList?,我们在做查询的时候把查询出来的数据经常存到arraylist里.<br>注意：想清楚指针指向</p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/%E5%9B%BE%E7%89%87%201.png" srcset="/img/loading.gif" alt=""><br><img src="http://q2rjj2f8w.bkt.clouddn.com/%E5%9B%BE%E7%89%87%202.png" srcset="/img/loading.gif" alt=""></p><h2 id="5-抽象类和接口的区别"><a href="#5-抽象类和接口的区别" class="headerlink" title="5.抽象类和接口的区别?"></a>5.抽象类和接口的区别?</h2><p>抽象类里可以有普通方法也可以有抽象方法,接口里只能有抽象方法,但是在jdk1.8以后也可以在接口中添加普通方法了,就是得用default修饰一下这个方法,调用方式如下代码:这个代码不用背,在于理解和动手操作</p><pre><code class="bash">interface Vehicle {　　default void print(){　　　　System.out.println(&quot;我是一辆车!&quot;);　　}　　static void blowHorn(){　　　　System.out.println(&quot;按喇叭!!!&quot;);　}}必须是default (默认)或者static (静态)修饰的方法，这样，接口中也可以写实现，而且接口的实现类可以重新接口的默认方法，也可以用super关键字调用接口的默认方法！public class car implements vehicle, fourWheeler {　　default void print(){　　　　System.out.println(&quot;我是一辆四轮汽车!&quot;);　　}}public class car implements vehicle, fourWheeler {　　public void print(){　　　　vehicle.super.print();　　}}</code></pre>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>郑州一日</title>
    <link href="undefined2019/12/21/%E6%B8%B8%E8%AE%B0/"/>
    <url>2019/12/21/%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="人真的很多，每次坐地铁都能激起买车的欲望。还有9天就2020年了。新年新规划。更要善始善终。"><a href="#人真的很多，每次坐地铁都能激起买车的欲望。还有9天就2020年了。新年新规划。更要善始善终。" class="headerlink" title="人真的很多，每次坐地铁都能激起买车的欲望。还有9天就2020年了。新年新规划。更要善始善终。"></a>人真的很多，每次坐地铁都能激起买车的欲望。还有9天就2020年了。新年新规划。更要善始善终。</h3><p>新的计划我会在博客里面一一列出。</p><h2 id="新悦城家附近的商场，去过一两次。没什么好玩的，那时候去还有闭门的店铺，也不知道现在如何了"><a href="#新悦城家附近的商场，去过一两次。没什么好玩的，那时候去还有闭门的店铺，也不知道现在如何了" class="headerlink" title="新悦城家附近的商场，去过一两次。没什么好玩的，那时候去还有闭门的店铺，也不知道现在如何了"></a>新悦城家附近的商场，去过一两次。没什么好玩的，那时候去还有闭门的店铺，也不知道现在如何了</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/61576909735_.pic.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="到达高铁站，12点得票，刚开始还没人，到了12点爆满了"><a href="#到达高铁站，12点得票，刚开始还没人，到了12点爆满了" class="headerlink" title="到达高铁站，12点得票，刚开始还没人，到了12点爆满了"></a>到达高铁站，12点得票，刚开始还没人，到了12点爆满了</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/51576909734_.pic.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="等车。凉风吹得嗖嗖的，冬天还是有多厚穿多厚。"><a href="#等车。凉风吹得嗖嗖的，冬天还是有多厚穿多厚。" class="headerlink" title="等车。凉风吹得嗖嗖的，冬天还是有多厚穿多厚。"></a>等车。凉风吹得嗖嗖的，冬天还是有多厚穿多厚。</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/41576909733_.pic.jpg" srcset="/img/loading.gif" alt=""></p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/11576909730_.pic.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="到达朋友家"><a href="#到达朋友家" class="headerlink" title="到达朋友家"></a>到达朋友家</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/31576909732_.pic.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="累了一天回去了"><a href="#累了一天回去了" class="headerlink" title="累了一天回去了"></a>累了一天回去了</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/21576909731_.pic.jpg" srcset="/img/loading.gif" alt=""></p><p>还有个小插曲，进车厢的时候旁边有一个带这个小女孩没座位，因为我就一站路。就让小女孩坐了。挺可爱的，她妈妈也挺好，走的时候还专门找到我给我水果吃。<br>在高铁上有点尴尬。不过还是挺开心的不是么，至少不后悔。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java面试题</title>
    <link href="undefined2019/12/20/java%E9%9D%A2%E8%AF%95%E9%A2%98-1/"/>
    <url>2019/12/20/java%E9%9D%A2%E8%AF%95%E9%A2%98-1/</url>
    
    <content type="html"><![CDATA[<p>java 每天5道 练习</p><h2 id="1-java里可以可以有多继承"><a href="#1-java里可以可以有多继承" class="headerlink" title="1.java里可以可以有多继承"></a>1.java里可以可以有多继承</h2><p>  不可以，想要多继承用接口</p><h2 id="2-HashMap和Hashtable的区别"><a href="#2-HashMap和Hashtable的区别" class="headerlink" title="2.HashMap和Hashtable的区别"></a>2.HashMap和Hashtable的区别</h2><p> 这两个都是map 接口下的实现类，我们开发时候常用的是HashMap 虽然HashMap不是线程安全的<br> 但是他的储存效率较高，Hashtable是线程安全的我们看过他底层的put方法前面加的synchronize关键字<br> ，但是他的效率太低，我们开发很少使用。<br> 为什么说hashTabke是线程安全的？因为看源码的时候里面put方法前面加了synchronized关键字<br> 什么情况下用HashMap?我们有时候在自定义json字符串的时候，封装到list中进行返回</p><h2 id="3-解决hashMap线程不安全的问题"><a href="#3-解决hashMap线程不安全的问题" class="headerlink" title="3.解决hashMap线程不安全的问题"></a>3.解决hashMap线程不安全的问题</h2><p> 可以通过Collections集合工具类对线程进行包装，使其变成线程安全的，也可以在使用时候加上synchronize<br> 关键字进行同步</p><h2 id="4-HashMap底层实现原理"><a href="#4-HashMap底层实现原理" class="headerlink" title="4.HashMap底层实现原理"></a>4.HashMap底层实现原理</h2><p> 这个我在论坛上看过，HashMap底层是通过数组和链接联合实现的，当我们创建hashmap时候会先创建<br> 一个数组，当我们听put方法存数据时，先根据key的hashcode值计算出hash值，然后用这个哈希值确定在数组中的位置，再把value值放进去，如果这个位置本来没放东西，就会直接放进去，如果之前就有，就会生成一个链表，把新放入的值放在头部，当用get方法取值时，会先根据key的hashcode值计算出hash值，确定位置，再根据equals方法从该位置上的链表中取出该value值</p><h2 id="5-碰撞怎么产生，怎么解决？"><a href="#5-碰撞怎么产生，怎么解决？" class="headerlink" title="5.碰撞怎么产生，怎么解决？"></a>5.碰撞怎么产生，怎么解决？</h2><p> 解决方案,堆里面在存储对象地址的时候有一个开放地址的方法：当发生地址冲突时，按照某种方法继续探测哈希表中的其他存储单元，直到找到空位置为止。<br>第二种是用rehash(再哈希法)：当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。比如上面第一次按照姓首字母进行哈希，如果产生冲突可以按照姓字母首字母第二位进行哈希，再冲突，第三位，直到不冲突为止<br>3、链地址法（拉链法）：创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java面试题</title>
    <link href="undefined2019/12/19/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>2019/12/19/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>java 每天5道 练习</p><h2 id="1-String类中常用的方法？"><a href="#1-String类中常用的方法？" class="headerlink" title="1.String类中常用的方法？"></a>1.String类中常用的方法？</h2><p>  Split(): 把字符串分割成字符串数组<br>  indexOf(): 从制定字符串提取索引位置<br>  append(): 追加字符和字符串<br>  trim(): 去除字符串两端空格<br>  replace(): 替换<br>  hashCode(): 返回此字符串的哈希码<br>  subString(): 截取字符串<br>  equals(): 比较<br>  length(): 获取字符串的长度<br>  valueOf(): 转换为字符串<br>  concat(): 将指定字符串连接到此字符串的结尾<br>  contains(): 检查一个字符串中是否包含想要的值</p><h2 id="2-什么是重写和重写"><a href="#2-什么是重写和重写" class="headerlink" title="2.什么是重写和重写"></a>2.什么是重写和重写</h2><p> 我理解的java里方法的重写和重载就是java里的多态，重载是在一个类中多态对的体现。<br> 方法重载是一个类中定义了多个方法相同，参数数量不同，类型和次序不同，这就是是重载。<br> 方法的重写是子类存在的方法与父类的方法名字相同，参数个数与类型一样，返回值一样，这就是重写</p><p> <img src="http://q2rjj2f8w.bkt.clouddn.com/java1.png" srcset="/img/loading.gif" alt=""></p><h2 id="3-String中的-和-equals-的区别"><a href="#3-String中的-和-equals-的区别" class="headerlink" title="3.String中的== 和 equals 的区别"></a>3.String中的== 和 equals 的区别</h2><p>  ==比较的是内存地址。equals比较的是内容。<br>  String a=”abc” String b=”abc” System.out.println(a==b) 输出的是true.String a= new String(“abc”),String b=new String(“abc”)   System.out.println(a==b) 输入的是false</p><h2 id="4-Java中的String，StringBuilder，StringBuffer三者的区别"><a href="#4-Java中的String，StringBuilder，StringBuffer三者的区别" class="headerlink" title="4.Java中的String，StringBuilder，StringBuffer三者的区别?"></a>4.Java中的String，StringBuilder，StringBuffer三者的区别?</h2><p>  我在开发时string 用来形容少量的字符串操作，他修饰的都是不可变字符串，StringBuffer同于可变的字符串中，拼接sql语句中使用，是线程安全的。<br>  在字符串后面拼接的方法是append。StringBuilder在开发时候很少用到，也没了解过。</p><h2 id="5-Final关键字-final和finally的区别"><a href="#5-Final关键字-final和finally的区别" class="headerlink" title="5.Final关键字?final和finally的区别?"></a>5.Final关键字?final和finally的区别?</h2><p>  其实Final是一个安全修饰符,就是用final修饰的类不能被继承,用final声明的方法不能被重写,使用final声明的变量就相当于常量,不能被修改。<br>Finally是在异常里经常用到的, 就是try和cach里的代码执行完以后,必须要执行的方法,我们经常在finally里写一些关闭资源的方法,比如说关闭数据库连接,或者关闭IO流什么的.</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神秘海域4</title>
    <link href="undefined2019/12/19/%E7%A5%9E%E7%A7%98%E6%B5%B7%E5%9F%9F/"/>
    <url>2019/12/19/%E7%A5%9E%E7%A7%98%E6%B5%B7%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>一个星期左右通关的，不愧是顽皮狗的神作。代入感极强。打斗和剧情都很nice。</p><h2 id="来几张图留念一下"><a href="#来几张图留念一下" class="headerlink" title="来几张图留念一下"></a>来几张图留念一下</h2><p><img src="http://q2rjj2f8w.bkt.clouddn.com/hai1.png" srcset="/img/loading.gif" alt=""></p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/hai2.png" srcset="/img/loading.gif" alt=""></p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/hai3.png" srcset="/img/loading.gif" alt=""></p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/hai4.png" srcset="/img/loading.gif" alt=""></p><p><img src="http://q2rjj2f8w.bkt.clouddn.com/hai5.png" srcset="/img/loading.gif" alt=""></p><p>年纪大了但是主角一颗冒险的心，内心从未停歇。期待下一个作品。下一个游戏玩的巫师三。以每天晚上半个小时的进度可以无望通关了。<br>节奏太慢，沉不下心可不行啊。</p>]]></content>
    
    
    <categories>
      
      <category>索尼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ps4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo整合gitub 常用命令</title>
    <link href="undefined2019/12/19/Hexo%E6%95%B4%E5%90%88Gitub/"/>
    <url>2019/12/19/Hexo%E6%95%B4%E5%90%88Gitub/</url>
    
    <content type="html"><![CDATA[<p>之前购买服务器搭建的博客网站，又费钱又费时。同事建议用hexo整合gitub搭建，一晚上就出来了。也要感谢大牛的技术栈。把一些在搭建时候重要的写下来。差点就续三年的服务器了！<br><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">点击查看hexo官方命令</a><br><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E5%86%99%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">这个教程挺详细的包括域名映射</a></p><h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><h3 id="清除缓存-每次提交前-最好clean一下"><a href="#清除缓存-每次提交前-最好clean一下" class="headerlink" title="清除缓存 每次提交前 最好clean一下"></a>清除缓存 每次提交前 最好clean一下</h3><pre><code class="bash">$ hexo clean</code></pre><h3 id="在线预览，使用debug模式-注意：先测试在提交"><a href="#在线预览，使用debug模式-注意：先测试在提交" class="headerlink" title="在线预览，使用debug模式 注意：先测试在提交"></a>在线预览，使用debug模式 注意：先测试在提交</h3><pre><code class="bash">$ hexo s --debug</code></pre><h3 id="生成静态文件后才可以提交"><a href="#生成静态文件后才可以提交" class="headerlink" title="生成静态文件后才可以提交"></a>生成静态文件后才可以提交</h3><pre><code class="bash">$ hexo gengrate</code></pre><h3 id="提交到gitub"><a href="#提交到gitub" class="headerlink" title="提交到gitub"></a>提交到gitub</h3><pre><code class="bash">$ hexo deploy</code></pre><h3 id="书写参数设置"><a href="#书写参数设置" class="headerlink" title="书写参数设置"></a>书写参数设置</h3><pre><code class="bash">title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</code></pre><h3 id="新建文章-跟标题"><a href="#新建文章-跟标题" class="headerlink" title="新建文章 跟标题"></a>新建文章 跟标题</h3><pre><code class="bash">$ hexo new&lt;title&gt;</code></pre><h3 id="更新-提示“FATAL-Port-4000-has-been-used-Try-other-port-instead-”"><a href="#更新-提示“FATAL-Port-4000-has-been-used-Try-other-port-instead-”" class="headerlink" title="更新 提示“FATAL Port 4000 has been used. Try other port instead.”"></a>更新 提示“FATAL Port 4000 has been used. Try other port instead.”</h3><p>在使用了$ hexo s命令预览博客效果后使用Control+C关闭<br>解决办法：</p><pre><code class="bash">$ sudo hexo s -p 新端口号</code></pre>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>